# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
stages:
  - build

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"


java-build-and-test:
  # select the most appropriate image for your project
  image: maven:3.8-openjdk-11
  stage: build
  # Cache downloaded dependencies and plugins between builds.
  # The key here separates one cache per branch/tag ($CI_COMMIT_REF_SLUG)
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    # the 'verify' goal is definitely the most appropriate here
    - mvn $MAVEN_CLI_OPTS verify
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - "**/target"
    reports:
      # declare the JUnit reports (recursive pattern for multi-module projects)
      junit:
        - "**/target/*-reports/TEST-*.xml"



# # This template uses jdk8 for verifying and deploying images
# image: maven:3.3.9-jdk-8

# # Cache downloaded dependencies and plugins between builds.
# # To keep cache across branches add 'key: "$CI_JOB_NAME"'
# cache:
#   paths:
#     - .m2/repository

# # For merge requests do not `deploy` but only run `verify`.
# # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
# .verify: &verify
#   stage: test
#   script:
#     - 'mvn $MAVEN_CLI_OPTS verify'
#   except:
#     variables:
#       - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# # Verify merge requests using JDK8
# verify:jdk8:
#   <<: *verify

# # To deploy packages from CI, create a ci_settings.xml file
# # For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# # Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# # For `master` branch run `mvn deploy` automatically.
# deploy:jdk8:
#   stage: deploy
#   script:
#     - if [ ! -f ci_settings.xml ];
#       then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
#       fi
#     - 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'
#   only:
#     variables:
#       - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
